package com.kh.spring.board.controller;

import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;

import javax.servlet.http.HttpSession;

import org.apache.taglibs.standard.lang.jstl.test.beans.PublicBean1;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;

import com.kh.spring.board.model.vo.Board;
import com.kh.spring.board.service.BoardService;
import com.kh.spring.common.model.vo.PageInfo;
import com.kh.spring.common.template.Pagination;

import oracle.sql.DATE;

@Controller
@RequestMapping("/board")
public class BoardController {
	
	private final BoardService bService;
	
	public BoardController(BoardService bService){
		this.bService = bService;
	}
	
	@RequestMapping("/list")
	public String boardList(@RequestParam(value="cpage", defaultValue = "1")
	int currentPage, Model model ){
		
		System.out.println("현재페이지 : " + currentPage);
		
		// 전체 게시글 수 조회 
		int listCount = bService.selectListCount();
		
		PageInfo pi = Pagination.getPageInfo(listCount, currentPage, 5, 5);
		
		// 게시글 목록 조회 
		ArrayList<Board> bList = bService.selectList(pi);
		model.addAttribute("list", bList); // 게시글 목록 데이터 
		model.addAttribute("pi",pi);	   // 페이징 관련 데이터 
		// WEB-INF/views/
		return "board/boardList";
	}
	@RequestMapping("/enrollForm") 
	public String boardEnrollFrom(){
		
		return "board/boardEnrollForm"; // 
	}
	
	
	private String saveFile(MultipartFile upfile,
			HttpSession session) {
	
		String currTime = new SimpleDateFormat("yyyyMMddHHmmss").format(new Date());
		
		int random = (int)(Math.random()* (99999 - 10000+1)) + 10000;
		
		String orgName = upfile.getOriginalFilename();  //
		
		String ext = orgName.substring(orgName.lastIndexOf("."));
		
		String chgName = currTime + random + ext;
		
		String path = session.getServletContext().getRealPath("/resources/uploadFiles/");
		
		try {
			upfile.transferTo(new File(path + chgName));
		}catch (IOException e) {
			e.printStackTrace();
		}
		
		return chgName;
		
	}
	
	@RequestMapping("/insert")
	public String insertBoard(Board b, MultipartFile upfile,
									   HttpSession session, Model model){
		/*
		 * System.out.println(b); System.out.println(upfile);
		 * 
		 * 첨부파일이 있는 경우 --> 전달된 파일을 서버에 저장 + Board 객체에 파일 정보를 저장
		 */	
		
		if(!upfile.getOriginalFilename().isEmpty()){ // upfile.getOriginalFilename().equals("")
			
			// 파일명을 변경하여 저장
			// 변경 파일명 => yyyyMMddHHmmss + xxxxx(랜덤값) + .확장자
			
			// 현재 날짜 시간 정보 
			String currTime = new SimpleDateFormat("yyyyMMddHHmmss").format(new Date());
			// * 5자리 랜덤값 (10000 ~ 99999)
			int random = (int)(Math.random()* (99999 - 10000+1)) + 10000;
			
			// * 확장자(.txt, .java, .png)
			String orgName = upfile.getOriginalFilename();  //
			
			String ext = orgName.substring(orgName.lastIndexOf("."));
			
			String chgName = currTime + random + ext;
			
			// 업로드할 파일을 저장할 위치의 물리적인 경로 조회 
			
			String path = session.getServletContext().getRealPath("/resources/uploadFiles/");
			
			try {
				upfile.transferTo(new File(path + chgName));
			}catch (IOException e) {
				e.printStackTrace();
			}
			b.setOriginName(orgName);
			b.setChangeName("/resources/uploadFiles/" + chgName);
		}
		// DB에 게시글 정보 저장(첨부파일 유/무 상관없이 처리)
		int result = bService.insertBoard(b);
		
		if(result > 0){ // 게시글 등록 성공...
			session.setAttribute("alertMsg", "게시글 등록 성공");
			// 게시글 목록 페이지로 url 재요청 
			return "redirect:/board/list";
			
		}else { 			// 게시글 등록 실패
			model.addAttribute("errorMsg", "게시글 등록 실패");
			return "common/errorPage";
		}
	}	
	
		@RequestMapping("/detail")
		public String boardDteail(int bno, HttpSession session, Model model){
		// * 해당게시글의 조회수를 업데이트 
		int result = bService.increaseCount(bno);	
			
		// * 조회수 증가 성공 시 해당 게시글 정보를 조회 
		if(result > 0){
		// 조회수 증가 성공 시 
		// 1) 해당 게시글 정보를 조회 
		// 2) 조회된 정보를 request 영역에 저장 
		// 3) 상세페이지로 응답
			Board b = bService.selectBoard(bno);
			model.addAttribute("b", b);
			return "board/boardDetail";
		}else {
		// * 조회수 증가 실패 시 에러페이지 응답
		// 1) 에러메세지를 request 영역에 저장 
		// 2) 에러 페이지 응답
			model.addAttribute("errorMsg","게시글 조회 실패했습니다.");
			return "common/errorPage"; 
		}
	}
		@RequestMapping("/updateForm")
		public String updateForm(int bno, Model model) {
				
			Board b = bService.selectBoard(bno);
			
			// System.out.println(b);	
			if(b != null) {
				model.addAttribute("b",b);
				return "board/boardUpdate";
			}else {
				model.addAttribute("errorMsg","게시글 수정 실패했습니다.");
				return "common/errorPage"; 
			}
		} 
		@RequestMapping("/update")
		public String boardUpdate(Board b, MultipartFile upfile, HttpSession session){
			System.out.println(b);
			System.out.println(upfile);
			
			/*
			 * 	새로 추가된 첨부파일이 있을 경우 
			 * 		=> 기존에 첨부파일이 있다면, 이전 파일은 제거(삭제)
			 * 			새로 추가된 첨부파일은 서버에 저장
			 * 			첨부파일의 원본명, 저장경로(변경된 파일명)를 DB에 저장
			 *					
			 * 
			 * */
			if(!upfile.getOriginalFilename().isEmpty()){
				// 기존에 첨부파일이 있다면 기존 파일 제거
				if(b.getOriginName() != null){
					new File(session.getServletContext().getRealPath("/resources/uploadFiles/")).delete();
					
					saveFile(upfile, session);
				}
			}	
			
			
			return "";
		}
		
}
